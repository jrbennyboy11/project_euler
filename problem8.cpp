#include <iostream>
using namespace std;

int main()
{
	const char *numbers[20];
	int wholeNumber[1000];
	int i;
	int j;
	int highestValue;
	int currentValue;

	numbers[0]  = "73167176531330624919225119674426574742355349194934";
	numbers[1]  = "96983520312774506326239578318016984801869478851843";
	numbers[2]  = "85861560789112949495459501737958331952853208805511";
	numbers[3]  = "12540698747158523863050715693290963295227443043557";
	numbers[4]  = "66896648950445244523161731856403098711121722383113";
	numbers[5]  = "62229893423380308135336276614282806444486645238749";
	numbers[6]  = "30358907296290491560440772390713810515859307960866";
	numbers[7]  = "70172427121883998797908792274921901699720888093776";
	numbers[8]  = "65727333001053367881220235421809751254540594752243";
	numbers[9]  = "52584907711670556013604839586446706324415722155397";
	numbers[10] = "53697817977846174064955149290862569321978468622482";
	numbers[11] = "83972241375657056057490261407972968652414535100474";
	numbers[12] = "82166370484403199890008895243450658541227588666881";
	numbers[13] = "16427171479924442928230863465674813919123162824586";
	numbers[14] = "17866458359124566529476545682848912883142607690042";
	numbers[15] = "24219022671055626321111109370544217506941658960408";
	numbers[16] = "07198403850962455444362981230987879927244284909188";
	numbers[17] = "84580156166097919133875499200524063689912560717606";
	numbers[18] = "05886116467109405077541002256983155200055935729725";
	numbers[19] = "71636269561882670428252483600823257530420752963450";

	highestValue = 0;
	currentValue = 0;

	for(i=0,j=0;i<1000;i++,j++)
	{
		j %= 20;
		wholeNumber[i] = numbers[i/50][j]-48;
	}

	for(i=4;i<1000;i++)
	{
		currentValue = 1;
		for(j=i-4;j<i+1;j++)
			currentValue *= wholeNumber[j];

		if(currentValue > highestValue)
		{
			highestValue = currentValue;
			cout << "Highest: " << wholeNumber[i-4] << " * " << wholeNumber[i-3] << " * " << wholeNumber[i-2] << " * " << wholeNumber[i-1] << " * " << wholeNumber[i] << " = " << currentValue << endl;
		}
	}

	cout << endl << "Highest Value Overall: " << highestValue << endl;
}
